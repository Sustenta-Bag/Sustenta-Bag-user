name: "Flutter GitFlow - Tags e Releases Simplificado"

on:
  # Acionado quando um PR é fechado
  pull_request:
    types: [closed]
    branches: [develop]
  
  # Acionado quando código é enviado diretamente para a develop
  push:
    branches: [develop]
    
  # Opção manual para testes
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  # Job 1: Criar tag e release
  create-tag-and-release:
    name: Criar Tag e Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true) || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Configurar identidade Git
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
      
      - name: Criar tag
        id: create-tag
        run: |
          # Gerar tag com base na data e hash
          DATE=$(date +'%Y%m%d')
          SHORT_HASH=$(git rev-parse --short HEAD)
          
          # Verificar tags dev existentes e incrementar
          LATEST_DEV_TAG=$(git tag -l "dev-*" | sort -V | tail -n 1)
          
          if [ -z "$LATEST_DEV_TAG" ]; then
            # Se não houver tag, começar com dev-001
            DEV_NUMBER="001"
          else
            # Incrementar o número da tag de develop
            DEV_NUMBER=$(echo $LATEST_DEV_TAG | sed -E 's/dev-([0-9]+).*/\1/')
            DEV_NUMBER=$(printf "%03d" $((10#$DEV_NUMBER + 1)))
          fi
          
          TAG="dev-${DEV_NUMBER}"
          
          # Obter mensagem para a tag (último commit)
          MESSAGE=$(git log -1 --pretty=%s | sed 's/["\r\n]//g' | head -c 100)
            
          # Criar a tag
          git tag -a "$TAG" -m "$MESSAGE"
          git push origin "$TAG"
          
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "message=$MESSAGE" >> "$GITHUB_OUTPUT"
          
          echo "### ✅ Tag criada com sucesso" >> "$GITHUB_STEP_SUMMARY"
          echo "- Tag: $TAG" >> "$GITHUB_STEP_SUMMARY"
          echo "- Mensagem: $MESSAGE" >> "$GITHUB_STEP_SUMMARY"
      
      - name: Gerar changelog
        id: changelog
        run: |
          TAG="${{ steps.create-tag.outputs.tag }}"
          
          # Encontrar a penúltima tag para comparar alterações
          PREV_TAG=$(git describe --tags --abbrev=0 `git rev-list --tags --skip=1 --max-count=1` || echo "")
          
          echo "### Changelog da tag $TAG" > changelog.md
          echo "" >> changelog.md
          
          if [ -n "$PREV_TAG" ]; then
            echo "Alterações desde $PREV_TAG:" >> changelog.md
            git log --pretty=format:"- %s (%an)" $PREV_TAG..$TAG >> changelog.md
          else
            echo "Primeiro lançamento" >> changelog.md
            git log --pretty=format:"- %s (%an)" >> changelog.md
          fi
          
          cat changelog.md >> "$GITHUB_STEP_SUMMARY"
      
      - name: Criar GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.create-tag.outputs.tag }}
          name: Release ${{ steps.create-tag.outputs.tag }}
          body_path: changelog.md
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}